##
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Slash command on Approve/LGTM
on:
  repository_dispatch:
    types:
      - approved-command
      - approve-command
      - lgtm-command

permissions:
  issues: write
  contents: write
  packages: read
  statuses: write
  pull-requests: write

jobs:
  approve:
    runs-on: ubuntu-latest
    outputs:
      nextstep: ${{ steps.approval.outputs.result }}
    steps:
      - uses: actions/github-script@v4
        id: approval
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const pull_request = '${{ github.event.client_payload.slash_command.args.named.pull_request }}';
            const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
            const author = '${{ github.event.client_payload.slash_command.args.named.author }}';
            
            const {data: thepull} = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_request_number
            });

            if ( ! thepull.mergeable ) {
              console.log('NOT Mergeable');
              return "not-mergeable";
            } 

            const output = `Approval Requested for Pull request.
            Pull request mergeable?: \`${thepull.mergeable}\`
            Approved by: \`${author}\`
            
            *Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            const {data: reviewers} = await github.pulls.listRequestedReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_request_number
            });

            var is_approved = false;

            const {data: pullLabels} = await github.issues.listLabelsOnIssue({
              issue_number: pull_request_number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const labels = pullLabels.map(label => label.name)

            var proceed_with_users = false;

            for (const aLabel of labels) {
              if ( aLabel == 'blue-green/new' || aLabel == 'blue-green/completed' || aLabel == 'merge-allowed') {
                proceed_with_users = true;
              }
            }

            if ( proceed_with_users ) {
              for (const aUser of reviewers.users ) {
                if( aUser.login == author ) {
                  is_approved = true;
                  break;
                }
              }
            } else {
              const message = `Proceed with next step for Blue/Green deployment.
              Submit: */approve|/lgtm|/approved* in order to continue with next step of Blue/Green Deployment.`;
              
              github.issues.createComment({
                issue_number: pull_request_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }

            if ( is_approved ) {
              github.issues.createComment({
                issue_number: pull_request_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });

              var reviewer_names = [];
              for (const aUser of reviewers.users ) {
                reviewer_names.push(aUser.login);
              }

              github.pulls.removeRequestedReviewers({
                pull_number: pull_request_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                reviewers: reviewer_names
              });

              github.issues.removeLabel({
                issue_number: pull_request_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'approval-required',
              });
              github.issues.removeLabel({
                issue_number: pull_request_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'review-required'
              });
              github.issues.addLabels({
                issue_number: pull_request_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['approved']
              });
              return 'approved'
            } else {
              return 'next'
            }
