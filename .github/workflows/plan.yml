## 
# (c) 2022 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Environment Plan on Pull request
on:
  pull_request:
    types:
      - opened
      - synchronize
    paths-ignore:
      - '.github/workflows/**'
      - 'modules/**'
      - '.beacon'
      - '.destroy'

concurrency: environment-awseb-v2

permissions:
  contents: read
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  # Job determines which label to apply
  bluegreen:
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.bluegreen.outputs.label }}
      nextlabel: ${{ steps.bluegreen.outputs.nextlabel }}
      action: ${{ steps.pr_status.outputs.result }}
    steps:
      # Source Checkout from PR Head
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Blue Green Deployment staging check
        id: bluegreen
        run: |
          label=$(cat .bluegreen_state | head -n 1)
          nextlabel="blue-green/$label"
          
          echo "nextlabel=${nextlabel}" >> $GITHUB_OUTPUT
          echo "label=${label}" >> $GITHUB_OUTPUT

      - name: Get PR status from labels
        id: pr_status
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const pull_request_number = context.issue.number;
            
            const {data: pullLabels} = await github.rest.issues.listLabelsOnIssue({
              issue_number: pull_request_number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const labels = pullLabels.map(label => label.name);
            
            for ( const aLabel of labels ) {
              if ( aLabel == 'approved' )
                return aLabel;
              else if ( aLabel == 'rollback' ) 
                return aLabel;
              else if ( aLabel == 'green-to-prod' )
                return aLabel;
              else if ( aLabel == 'blue-green/new' )
                return "new";
            }
            return 'in-progress';

  # Plan Job:
  #   Just makes validations that the Terraform scripts are OK to continue
  plan:
    needs:
      - bluegreen
    if: ${{ needs.bluegreen.outputs.action != 'approved' }}
    runs-on: ubuntu-latest
    outputs:
      auto_approve: ${{ steps.check_automatic.outputs.autoapprove }}
    steps:
      # Automatic Labeling from .github/labeler.yml
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      # Source Checkout from PR Head
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      # Install yq tool
      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.6.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      # Install terraform tools
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      # Automatic environment checking from OWNERS file
      # usually this is not automatic for blue-green envs
      - name: Check if automatic
        id: check_automatic
        run: |
          is_auto=$(yq e '.automatic' OWNERS)
          if [[ "$is_auto" != "true" ]] ; then
            is_auto=false
          fi
          echo "autoapprove=$is_auto" >> $GITHUB_OUTPUT

      # Perform Terraform formatting check
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # Perform Terraform Init in order to check if all modules are OK
      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Perform Terraform Validation of HCL scripts
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      # Report as PR comment the output of validations
      - name: Report Validations Output
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `## Environment Terraform Linting, Initialization & Validation
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  
  # Deploy Job
  #   Perform deployment as per the step indicator by .beacon file.
  #   Slash commands modifies the PR HEAD accordingly to make this flow run properly.
  #   Runs unless a rollback was not requested.
  deploy:
    runs-on: ubuntu-latest
    needs:
      - bluegreen
      - plan
    if: ${{ needs.bluegreen.outputs.action != 'rollback' && needs.bluegreen.outputs.action != 'approved' }}
    steps:
      # Check out of the PR HEAD (default)
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      # Install Terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      # Run Terraform Init, as we start on clean workspace
      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Create Plan Directory
        run: mkdir -p ./.plans

      # Run Terraform Plan to validate all changes
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out ./.plans/plan.out
        continue-on-error: ${{ needs.plan.outputs.auto_approve != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Report the plan output to PR as new Comment
      - name: Report Plan Output
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `## Environment Plan Validation
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Terraform Apply with the plan output left
      - name: Terraform Apply
        id: apply
        if: steps.plan.outcome == 'success'
        run: terraform apply -no-color ./.plans/plan.out
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Report the apply output to the PR as new comment
      - name: Report terraform apply output
        uses: actions/github-script@v6
        env:
          APPLY: "terraform apply\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const status = '${{ needs.bluegreen.outputs.action }}';
            
            var comm_output = ''; 
            if ( status == 'in-progress' ) {
              comm_output = '/green-to-prod | /ok-to-prod | /to-prod | /apply-prod';
            } else {
              comm_output = '/approved | /lgtm';
            }
            
            const output = `## Changes reconciled
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
            <details><summary>Show plan/apply report</summary>
            
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>

            Submit: *${comm_output}* in order to continue with next step of Blue/Green Deployment.
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      # Fail the workflow if the plan or apply was not success
      - name: Fail the workflow
        if: ${{ steps.plan.outcome != 'success' || steps.apply.outcome != 'success' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            core.setFailed('Plan or Apply for Deploy was not successful!')

      # Label step as deployed
      - name: Label PR step as deployed
        uses: actions/github-script@v6
        if: steps.plan.outcome == 'success'
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['deployed']
            })

      # Output where the version is deployed
      - name: Terraform output
        id: tf_result
        if: steps.plan.outcome == 'success'
        run: terraform output -json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Take output from Terraform and display on PR
      - name: Display outputs
        if: ${{ steps.plan.outcome == 'success' && steps.tf_result.outcome == 'success' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const tf_outputs = JSON.parse(`${{ steps.tf_result.outputs.stdout }}`);
            const bluegreen_version = '${{ needs.bluegreen.outputs.label }}';
            
            const output = `### Application Deployment information:
            Available Environment: **\`${bluegreen_version}\`**
            CNAME URL: **http://${tf_outputs.url_cname.value}\**
            Environment A URL: **http://${tf_outputs.url_deployment_a.value}**
            Environment B URL: **http://${tf_outputs.url_deployment_b.value}**
            
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # Proceed with labeling if the procedure is candidate to be autoapproved
  label_autoapprove:
    needs:
      - bluegreen
      - plan
    runs-on: ubuntu-latest
    if: ${{ needs.plan.outputs.auto_approve == 'true' }}
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approved', 'automatic-environment']
            })

  # Job to add the required reviewers and approvals to the PR
  add_reviewers_and_approvals:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ needs.plan.outputs.auto_approve != 'true' && needs.bluegreen.outputs.action != 'approved' }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Read reviewers from file
        id: reviewers
        run: |
          count=$(yq e '.requiredReviewers' OWNERS)
          reviewers_as_json=$(yq e -j -I=0 '.reviewers' OWNERS)
          echo "count=$count" >> $GITHUB_OUTPUT
          echo "as_json=$reviewers_as_json" >> $GITHUB_OUTPUT

      - name: Add review and approval labels
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const reviewers_json=JSON.parse('${{ steps.reviewers.outputs.as_json }}');
            const reviewers_count=${{ steps.reviewers.outputs.count }};
            const label='${{ needs.bluegreen.outputs.label }}';
            const nextlabel='${{ needs.bluegreen.outputs.nextlabel }}';
            const labels = ['approval-required','review-required'];
            const actor = '${{ github.event.pull_request.user.login }}'

            if ( nextlabel != '' )
              labels.push(nextlabel)

            var reviewers = []
            for ( const rev of reviewers_json ) {
              if ( actor != rev ) {
                reviewers.push(rev)
              }
            }

            github.rest.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: reviewers
            });

            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });

  # Place a do-not-merge label untl all the conditions are met
  #   the conditions are:
  #     labels are: blue-green/new or blue-green/complete
  do_not_merge_label:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ needs.plan.outputs.auto_approve != 'true' && needs.bluegreen.outputs.action != 'approved' }}
    outputs:
      is_mergeable: ${{ steps.check.outputs.result }}
    steps:
      - name: Set DO-NOT-MERGE if not in last step
        id: check
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const {data: pullLabels} = await github.rest.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const labels = pullLabels.map(label => label.name);

            var is_mergeable = false;

            for (const aLabel of labels) {
              if ( aLabel == 'blue-green/new' || aLabel == 'approved' ) {
                is_mergeable = true;
              }
            }

            if ( ! is_mergeable ) {
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [ 'do-not-merge' ]
              });
            }

            return ( is_mergeable ? 'true' : 'false' );

  # Perform Rollback on master as a Rollback was requested
  rollback-on-master:
    needs:
      - plan
    if: ${{ needs.bluegreen.outputs.action == 'rollback' }}
    runs-on: ubuntu-latest
    steps:
      # Install terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      # Get pull request base
      - name: Get Pull Request BASE Ref
        uses: actions/github-script@v6
        id: the_pull
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const {data: thePull} = await github.rest.pulls.get({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return thePull.base.ref;

      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.the_pull.outputs.result }}
          token: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Create Plan Directory
        run: mkdir -p ./.plans

      - name: Terraform Plan on Master Rollback Traffic
        id: plan
        run: terraform plan -no-color -out ./.plans/plan.out
        continue-on-error: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Apply on Master Workspace
        id: apply
        run: terraform apply -no-color ./.plans/plan.out
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Report terraform apply output
        uses: actions/github-script@v6
        env:
          PLAN: "terraform plan\n${{ steps.plan.outputs.stdout }}"
          APPLY: "terraform apply\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `### Rollback result on Master
            #### Terraform Plan ${{ steps.tier_to_run.outputs.tier }}üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Apply ${{ steps.tier_to_run.outputs.tier }}üìñ\`${{ steps.apply.outcome }}\`
            <details><summary>Show plan/apply report</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            ---\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>

            Rollback Complete Pull request may be closed!
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # Close PR on Rollback condition
  #   this closes the PR without merging into target branch
  close-pull:
    runs-on: ubuntu-latest
    needs:
      - plan
      - rollback-on-master
    if: ${{ needs.bluegreen.outputs.action == 'rollback' }}
    steps:
      - name: Closes the Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const {data: thePull} = await github.rest.pulls.get({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            github.rest.pulls.update({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
            });
